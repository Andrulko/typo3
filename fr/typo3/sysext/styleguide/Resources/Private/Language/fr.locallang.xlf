<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.0">
  <file source-language="en" datatype="plaintext" original="messages" date="2013-05-01T00:00:000" product-name="styleguide" target-language="fr">
    <header/>
    <body>
      <trans-unit id="module.configuration.title" resname="module.configuration.title">
        <source>Styleguide</source>
        <target state="needs-translation">Styleguide</target>
      </trans-unit>
      <trans-unit id="module.configuration.shortDescription" resname="module.configuration.shortDescription">
        <source>Styleguide of the TYPO3 CMS</source>
        <target state="needs-translation">Styleguide of the TYPO3 CMS</target>
      </trans-unit>
      <trans-unit id="module.configuration.description" resname="module.configuration.description">
        <source>The module offers the creation of a page tree either with TCA demo records or content elements.&lt;br /&gt;In addition, the most well-known backend components that come with the TYPO3 CMS are presented.</source>
        <target state="needs-translation">The module offers the creation of a page tree either with TCA demo records or content elements.&lt;br /&gt;In addition, the most well-known backend components that come with the TYPO3 CMS are presented.</target>
      </trans-unit>
      <trans-unit id="module.configuration.components.title" resname="module.configuration.components.title">
        <source>Component Library: Components</source>
        <target state="needs-translation">Component Library: Components</target>
      </trans-unit>
      <trans-unit id="module.configuration.pageTrees.title" resname="module.configuration.pageTrees.title">
        <source>Manage example page trees</source>
        <target state="needs-translation">Manage example page trees</target>
      </trans-unit>
      <trans-unit id="module.configuration.styles.title" resname="module.configuration.styles.title">
        <source>Component Library: Styles</source>
        <target state="needs-translation">Component Library: Styles</target>
      </trans-unit>
      <trans-unit id="componentsOverview.headline" resname="componentsOverview.headline">
        <source>Components</source>
        <target state="needs-translation">Components</target>
      </trans-unit>
      <trans-unit id="componentsOverview.link.title" resname="componentsOverview.link.title">
        <source>Open %1s component</source>
        <target state="needs-translation">Open %1s component</target>
      </trans-unit>
      <trans-unit id="managePageTrees.headline" resname="managePageTrees.headline">
        <source>Manage example page trees</source>
        <target state="needs-translation">Manage example page trees</target>
      </trans-unit>
      <trans-unit id="stylesOverview.headline" resname="stylesOverview.headline">
        <source>Styles</source>
        <target state="needs-translation">Styles</target>
      </trans-unit>
      <trans-unit id="stylesOverview.link.title" resname="stylesOverview.link.title">
        <source>Open %1s style</source>
        <target state="needs-translation">Open %1s style</target>
      </trans-unit>
      <trans-unit id="styleguide" resname="styleguide">
        <source>Styleguide</source>
        <target state="needs-translation">Styleguide</target>
      </trans-unit>
      <trans-unit id="action.accordion" resname="action.accordion">
        <source>Accordion</source>
        <target state="needs-translation">Accordion</target>
      </trans-unit>
      <trans-unit id="action.avatar" resname="action.avatar">
        <source>Avatar</source>
        <target state="needs-translation">Avatar</target>
      </trans-unit>
      <trans-unit id="action.badges" resname="action.badges">
        <source>Badges</source>
        <target state="needs-translation">Badges</target>
      </trans-unit>
      <trans-unit id="action.buttons" resname="action.buttons">
        <source>Buttons</source>
        <target state="needs-translation">Buttons</target>
      </trans-unit>
      <trans-unit id="action.cards" resname="action.cards">
        <source>Cards</source>
        <target state="needs-translation">Cards</target>
      </trans-unit>
      <trans-unit id="action.checkboxes" resname="action.checkboxes">
        <source>Checkboxes</source>
        <target state="needs-translation">Checkboxes</target>
      </trans-unit>
      <trans-unit id="action.colorTokens" resname="action.colorTokens">
        <source>Color Tokens</source>
        <target state="needs-translation">Color Tokens</target>
      </trans-unit>
      <trans-unit id="action.componentsOverview" resname="action.componentsOverview">
        <source>Components overview</source>
        <target state="needs-translation">Components overview</target>
      </trans-unit>
      <trans-unit id="action.flashMessages" resname="action.flashMessages">
        <source>Flash messages</source>
        <target state="needs-translation">Flash messages</target>
      </trans-unit>
      <trans-unit id="action.form" resname="action.form">
        <source>Form</source>
        <target state="needs-translation">Form</target>
      </trans-unit>
      <trans-unit id="action.icons" resname="action.icons">
        <source>Icons</source>
        <target state="needs-translation">Icons</target>
      </trans-unit>
      <trans-unit id="action.infobox" resname="action.infobox">
        <source>Infobox</source>
        <target state="needs-translation">Infobox</target>
      </trans-unit>
      <trans-unit id="action.managePageTrees" resname="action.managePageTrees">
        <source>Manage example page trees</source>
        <target state="needs-translation">Manage example page trees</target>
      </trans-unit>
      <trans-unit id="action.modal" resname="action.modal">
        <source>Modal</source>
        <target state="needs-translation">Modal</target>
      </trans-unit>
      <trans-unit id="action.notifications" resname="action.notifications">
        <source>Notifications</source>
        <target state="needs-translation">Notifications</target>
      </trans-unit>
      <trans-unit id="action.pagination" resname="action.pagination">
        <source>Pagination</source>
        <target state="needs-translation">Pagination</target>
      </trans-unit>
      <trans-unit id="action.progressIndicators" resname="action.progressIndicators">
        <source>Progress indicators</source>
        <target state="needs-translation">Progress indicators</target>
      </trans-unit>
      <trans-unit id="action.shadows" resname="action.shadows">
        <source>Shadows</source>
        <target state="needs-translation">Shadows</target>
      </trans-unit>
      <trans-unit id="action.stylesOverview" resname="action.stylesOverview">
        <source>Styles overview</source>
        <target state="needs-translation">Styles overview</target>
      </trans-unit>
      <trans-unit id="action.surfaces" resname="action.surfaces">
        <source>Surfaces</source>
        <target state="needs-translation">Surfaces</target>
      </trans-unit>
      <trans-unit id="action.tab" resname="action.tab">
        <source>Tabs</source>
        <target state="needs-translation">Tabs</target>
      </trans-unit>
      <trans-unit id="action.tables" resname="action.tables">
        <source>Tables</source>
        <target state="needs-translation">Tables</target>
      </trans-unit>
      <trans-unit id="action.trees" resname="action.trees">
        <source>Trees</source>
        <target state="needs-translation">Trees</target>
      </trans-unit>
      <trans-unit id="action.typography" resname="action.typography">
        <source>Typography</source>
        <target state="needs-translation">Typography</target>
      </trans-unit>
      <trans-unit id="tcaCreateButton" resname="tcaCreateButton">
        <source>Create page tree</source>
        <target state="needs-translation">Create page tree</target>
      </trans-unit>
      <trans-unit id="tcaDeleteButton" resname="tcaDeleteButton">
        <source>Delete page tree and all related records</source>
        <target state="needs-translation">Delete page tree and all related records</target>
      </trans-unit>
      <trans-unit id="tcaCreateActionOkTitle" resname="tcaCreateActionOkTitle">
        <source>Data created</source>
        <target state="needs-translation">Data created</target>
      </trans-unit>
      <trans-unit id="tcaCreateActionOkBody" resname="tcaCreateActionOkBody">
        <source>A page tree with TCA demo records was created.</source>
        <target state="needs-translation">A page tree with TCA demo records was created.</target>
      </trans-unit>
      <trans-unit id="tcaCreateActionFailedTitle" resname="tcaCreateActionFailedTitle">
        <source>No data created</source>
        <target state="needs-translation">No data created</target>
      </trans-unit>
      <trans-unit id="tcaCreateActionFailedBody" resname="tcaCreateActionFailedBody">
        <source>A page tree with TCA demo records exists already. Please delete that first.</source>
        <target state="needs-translation">A page tree with TCA demo records exists already. Please delete that first.</target>
      </trans-unit>
      <trans-unit id="tcaDeleteActionOkTitle" resname="tcaDeleteActionOkTitle">
        <source>Data deleted</source>
        <target state="needs-translation">Data deleted</target>
      </trans-unit>
      <trans-unit id="tcaDeleteActionOkBody" resname="tcaDeleteActionOkBody">
        <source>The page tree and all related records were deleted.</source>
        <target state="needs-translation">The page tree and all related records were deleted.</target>
      </trans-unit>
      <trans-unit id="extConfTemplateLocalizedLabel" resname="extConfTemplateLocalizedLabel">
        <source>A localized label</source>
        <target state="needs-translation">A localized label</target>
      </trans-unit>
      <trans-unit id="translatedHelpTextForSelectCheckBox3" resname="translatedHelpTextForSelectCheckBox3">
        <source>A localized help text</source>
        <target state="needs-translation">A localized help text</target>
      </trans-unit>
      <trans-unit id="minimalTableTitle" resname="minimalTableTitle">
        <source>Form engine - Minimal table configuration</source>
        <target state="needs-translation">Form engine - Minimal table configuration</target>
      </trans-unit>
      <trans-unit id="minimalTableTitleField" resname="minimalTableTitleField">
        <source>Title field</source>
        <target state="needs-translation">Title field</target>
      </trans-unit>
      <trans-unit id="frontendCreateButtonWithSets" resname="frontendCreateButtonWithSets">
        <source>Create page tree with site sets</source>
        <target state="needs-translation">Create page tree with site sets</target>
      </trans-unit>
      <trans-unit id="frontendCreateButtonWithSysTemplate" resname="frontendCreateButtonWithSysTemplate">
        <source>Create page tree with sys_template</source>
        <target state="needs-translation">Create page tree with sys_template</target>
      </trans-unit>
      <trans-unit id="frontendDeleteButton" resname="frontendDeleteButton">
        <source>Delete page tree and all related records</source>
        <target state="needs-translation">Delete page tree and all related records</target>
      </trans-unit>
      <trans-unit id="frontendCreateActionOkTitle" resname="frontendCreateActionOkTitle">
        <source>Data created</source>
        <target state="needs-translation">Data created</target>
      </trans-unit>
      <trans-unit id="frontendCreateActionOkBody" resname="frontendCreateActionOkBody">
        <source>A page tree with content elements was created.</source>
        <target state="needs-translation">A page tree with content elements was created.</target>
      </trans-unit>
      <trans-unit id="frontendCreateActionFailedTitle" resname="frontendCreateActionFailedTitle">
        <source>No data created</source>
        <target state="needs-translation">No data created</target>
      </trans-unit>
      <trans-unit id="frontendCreateActionFailedBody" resname="frontendCreateActionFailedBody">
        <source>A page tree with content elements exists already. Please delete that first.</source>
        <target state="needs-translation">A page tree with content elements exists already. Please delete that first.</target>
      </trans-unit>
      <trans-unit id="frontendDeleteActionOkTitle" resname="frontendDeleteActionOkTitle">
        <source>Data deleted</source>
        <target state="needs-translation">Data deleted</target>
      </trans-unit>
      <trans-unit id="frontendDeleteActionOkBody" resname="frontendDeleteActionOkBody">
        <source>The page tree and all related records were deleted.</source>
        <target state="needs-translation">The page tree and all related records were deleted.</target>
      </trans-unit>
      <trans-unit id="itemGroupLabel" resname="itemGroupLabel">
        <source>Item group from locallang</source>
        <target state="needs-translation">Item group from locallang</target>
      </trans-unit>
      <trans-unit id="backendLayouts.styleguideFrontend.title" resname="backendLayouts.styleguideFrontend.title">
        <source>Styleguide Frontend</source>
        <target state="needs-translation">Styleguide Frontend</target>
      </trans-unit>
      <trans-unit id="backendLayouts.styleguideFrontend.colpos.0" resname="backendLayouts.styleguideFrontend.colpos.0">
        <source>Main content</source>
        <target state="needs-translation">Main content</target>
      </trans-unit>
      <trans-unit id="colorScheme.dark.label" resname="colorScheme.dark.label">
        <source>Dark mode</source>
        <target state="needs-translation">Dark mode</target>
      </trans-unit>
      <trans-unit id="colorScheme.light.label" resname="colorScheme.light.label">
        <source>Light mode</source>
        <target state="needs-translation">Light mode</target>
      </trans-unit>
      <trans-unit id="section.colorScheme.headline" resname="section.colorScheme.headline">
        <source>Color scheme</source>
        <target state="needs-translation">Color scheme</target>
      </trans-unit>
      <trans-unit id="section.frontend.headline" resname="section.frontend.headline">
        <source>Frontend Styleguide</source>
        <target state="needs-translation">Frontend Styleguide</target>
      </trans-unit>
      <!-- Component: Avatar -->
      <trans-unit id="component.avatar.headline" resname="component.avatar.headline">
        <source>Avatar</source>
        <target state="needs-translation">Avatar</target>
      </trans-unit>
      <trans-unit id="component.avatar.introtext" resname="component.avatar.introtext">
        <source><![CDATA[An avatar displays an image that represents a backend user and can provide additional information such as their status.<br>Avatars can be displayed with an own ViewHelper. If an avatar image is stored in the user settings, this will be used instead of the standard image.]]></source>
        <target state="needs-translation"><![CDATA[An avatar displays an image that represents a backend user and can provide additional information such as their status.<br>Avatars can be displayed with an own ViewHelper. If an avatar image is stored in the user settings, this will be used instead of the standard image.]]></target>
      </trans-unit>
      <trans-unit id="component.avatar.section.default.headline" resname="component.avatar.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.avatar.section.default.text" resname="component.avatar.section.default.text">
        <source>Display the backend user's avatar image or a static fallback image for users without avatar images.</source>
        <target state="needs-translation">Display the backend user's avatar image or a static fallback image for users without avatar images.</target>
      </trans-unit>
      <trans-unit id="component.avatar.section.withStatus.headline" resname="component.avatar.section.withStatus.headline">
        <source>Status</source>
        <target state="needs-translation">Status</target>
      </trans-unit>
      <trans-unit id="component.avatar.section.withStatus.text" resname="component.avatar.section.withStatus.text">
        <source>If set, the backend user type (normal user or admin user) and its status (disabled or not) will be displayed next to the avatar. </source>
        <target state="needs-translation">If set, the backend user type (normal user or admin user) and its status (disabled or not) will be displayed next to the avatar. </target>
      </trans-unit>
      <!-- Component: Accordion -->
      <trans-unit id="component.accordion.headline" resname="component.accordion.headline">
        <source>Accordion</source>
        <target state="needs-translation">Accordion</target>
      </trans-unit>
      <trans-unit id="component.accordion.section.default.headline" resname="component.accordion.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.accordion.section.default.text" resname="component.accordion.section.default.text">
        <source>By default, accordion elements are closed.</source>
        <target state="needs-translation">By default, accordion elements are closed.</target>
      </trans-unit>
      <trans-unit id="component.accordion.section.firstPanelOpened.headline" resname="component.accordion.section.firstPanelOpened.headline">
        <source>Open an accordion element by default</source>
        <target state="needs-translation">Open an accordion element by default</target>
      </trans-unit>
      <trans-unit id="component.accordion.section.firstPanelOpened.text" resname="component.accordion.section.firstPanelOpened.text">
        <source><![CDATA[If necessary, you can specify that an accordion element should be open by default. To achieve this, add an additional class "show" to <code>.panel-collapse</code> and set "aria-expanded" of <code>.panel-title a</code> to "true".]]></source>
        <target state="needs-translation"><![CDATA[If necessary, you can specify that an accordion element should be open by default. To achieve this, add an additional class "show" to <code>.panel-collapse</code> and set "aria-expanded" of <code>.panel-title a</code> to "true".]]></target>
      </trans-unit>
      <!-- Component: Badge -->
      <trans-unit id="component.badge.headline" resname="component.badge.headline">
        <source>Badges</source>
        <target state="needs-translation">Badges</target>
      </trans-unit>
      <trans-unit id="component.badge.section.color.headline" resname="component.badge.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.badge.section.default.headline" resname="component.badge.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.badge.section.shape.headline" resname="component.badge.section.shape.headline">
        <source>Shape</source>
        <target state="needs-translation">Shape</target>
      </trans-unit>
      <trans-unit id="component.badge.section.withinHeadlines.headline" resname="component.badge.section.withinHeadlines.headline">
        <source>Usage within headings</source>
        <target state="needs-translation">Usage within headings</target>
      </trans-unit>
      <!-- Component: Button -->
      <trans-unit id="component.button.headline" resname="component.button.headline">
        <source>Buttons</source>
        <target state="needs-translation">Buttons</target>
      </trans-unit>
      <trans-unit id="component.button.section.color.headline" resname="component.button.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.button.section.default.headline" resname="component.button.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.button.section.stateActive.headline" resname="component.button.section.stateActive.headline">
        <source>Active state</source>
        <target state="needs-translation">Active state</target>
      </trans-unit>
      <trans-unit id="component.button.section.stateDisabled.headline" resname="component.button.section.stateDisabled.headline">
        <source>Disabled state</source>
        <target state="needs-translation">Disabled state</target>
      </trans-unit>
      <trans-unit id="component.button.section.types.headline" resname="component.button.section.types.headline">
        <source>Types</source>
        <target state="needs-translation">Types</target>
      </trans-unit>
      <trans-unit id="component.button.section.withIcon.headline" resname="component.button.section.withIcon.headline">
        <source>Additional icon</source>
        <target state="needs-translation">Additional icon</target>
      </trans-unit>
      <!-- Component: Card -->
      <trans-unit id="component.card.headline" resname="component.card.headline">
        <source>Cards</source>
        <target state="needs-translation">Cards</target>
      </trans-unit>
      <trans-unit id="component.card.introtext" resname="component.card.introtext">
        <source>Cards can be displayed individually or in groups.</source>
        <target state="needs-translation">Cards can be displayed individually or in groups.</target>
      </trans-unit>
      <trans-unit id="component.card.section.alignment.headline" resname="component.card.section.alignment.headline">
        <source>Alignment</source>
        <target state="needs-translation">Alignment</target>
      </trans-unit>
      <trans-unit id="component.card.section.alignment.text" resname="component.card.section.alignment.text">
        <source><![CDATA[If you have multiple cards and each have a link or button, they may not align properly depending on the length of the previously placed headings or description text. To ensure they align regardless of previous content, place the link or button inside <code>div.card-footer</code> and not inside <code>div.card-body</code>. This way the links will always be aligned at the bottom of the card.]]></source>
        <target state="needs-translation"><![CDATA[If you have multiple cards and each have a link or button, they may not align properly depending on the length of the previously placed headings or description text. To ensure they align regardless of previous content, place the link or button inside <code>div.card-footer</code> and not inside <code>div.card-body</code>. This way the links will always be aligned at the bottom of the card.]]></target>
      </trans-unit>
      <trans-unit id="component.card.section.color.headline" resname="component.card.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.card.section.color.text" resname="component.card.section.color.text">
        <source><![CDATA[It is possible to color cards. However, this option is rarely used - so please use this option sparingly. All available options are listed below. If needed assign one of the following classes to the <code>div.card</code>.<br> If you want to display the card in its default state, it is not necessary to add <code>.card-default</code> to the <code>div.card</code> - just omit the extra class.]]></source>
        <target state="needs-translation"><![CDATA[It is possible to color cards. However, this option is rarely used - so please use this option sparingly. All available options are listed below. If needed assign one of the following classes to the <code>div.card</code>.<br> If you want to display the card in its default state, it is not necessary to add <code>.card-default</code> to the <code>div.card</code> - just omit the extra class.]]></target>
      </trans-unit>
      <trans-unit id="component.card.section.default.headline" resname="component.card.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.card.section.default.text" resname="component.card.section.default.text">
        <source>This is an example of a single card with its possible content. Unless further defined via CSS, a single card takes on the full width of the place it has been put into.</source>
        <target state="needs-translation">This is an example of a single card with its possible content. Unless further defined via CSS, a single card takes on the full width of the place it has been put into.</target>
      </trans-unit>
      <trans-unit id="component.card.section.extensionManangerModule.headline" resname="component.card.section.extensionManangerModule.headline">
        <source>"Extension Manager" module</source>
        <target state="needs-translation">"Extension Manager" module</target>
      </trans-unit>
      <trans-unit id="component.card.section.extensionManangerModule.text" resname="component.card.section.extensionManangerModule.text">
        <source>In the extension manager it is possible to get pre-configured distributions. For this view, the cards have been enhanced with an image and some badges.</source>
        <target state="needs-translation">In the extension manager it is possible to get pre-configured distributions. For this view, the cards have been enhanced with an image and some badges.</target>
      </trans-unit>
      <trans-unit id="component.card.section.formFieldsInCards.headline" resname="component.card.section.formFieldsInCards.headline">
        <source>Form fields in cards</source>
        <target state="needs-translation">Form fields in cards</target>
      </trans-unit>
      <trans-unit id="component.card.section.formFieldsInCards.text" resname="component.card.section.formFieldsInCards.text">
        <source><![CDATA[It is also possible to display forms and form fields in cards. This is done, for example, in the "Upload Extension" section of the <a href="%1s">"Extensions" module</a>, in the "Feature Toggles" overlay in the <a href="%2s">"Settings" module</a> and in the "Full search" submodule of the <a href="%3s">"DB Check" module</a>.]]></source>
        <target state="needs-translation"><![CDATA[It is also possible to display forms and form fields in cards. This is done, for example, in the "Upload Extension" section of the <a href="%1s">"Extensions" module</a>, in the "Feature Toggles" overlay in the <a href="%2s">"Settings" module</a> and in the "Full search" submodule of the <a href="%3s">"DB Check" module</a>.]]></target>
      </trans-unit>
      <trans-unit id="component.card.section.multipleCards.headline" resname="component.card.section.multipleCards.headline">
        <source>Multiple cards</source>
        <target state="needs-translation">Multiple cards</target>
      </trans-unit>
      <trans-unit id="component.card.section.multipleCards.text" resname="component.card.section.multipleCards.text">
        <source><![CDATA[To display multiple cards, group them by wrapping them with <code>div.card-container</code>.]]></source>
        <target state="needs-translation"><![CDATA[To display multiple cards, group them by wrapping them with <code>div.card-container</code>.]]></target>
      </trans-unit>
      <trans-unit id="component.card.section.rowsInCards.headline" resname="component.card.section.rowsInCards.headline">
        <source>Rows in cards</source>
        <target state="needs-translation">Rows in cards</target>
      </trans-unit>
      <trans-unit id="component.card.section.rowsInCards.text" resname="component.card.section.rowsInCards.text">
        <source>On top of the element information overlay, rows are included within the card component.</source>
        <target state="needs-translation">On top of the element information overlay, rows are included within the card component.</target>
      </trans-unit>
      <trans-unit id="component.card.section.size.headline" resname="component.card.section.size.headline">
        <source>Size</source>
        <target state="needs-translation">Size</target>
      </trans-unit>
      <trans-unit id="component.card.section.size.text" resname="component.card.section.size.text">
        <source><![CDATA[To give the card the desired size, assign one of the following classes to the <code>div.card</code>. If only a single card is used, it must be wrapped with <code>div.card-container</code> as with multiple cards.]]></source>
        <target state="needs-translation"><![CDATA[To give the card the desired size, assign one of the following classes to the <code>div.card</code>. If only a single card is used, it must be wrapped with <code>div.card-container</code> as with multiple cards.]]></target>
      </trans-unit>
      <!-- Component: Checkbox -->
      <trans-unit id="component.checkbox.headline" resname="component.checkbox.headline">
        <source>Checkboxes</source>
        <target state="needs-translation">Checkboxes</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.checkBoxToggleButton.headline" resname="component.checkbox.section.checkBoxToggleButton.headline">
        <source>Checkbox toggle button</source>
        <target state="needs-translation">Checkbox toggle button</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.default.headline" resname="component.checkbox.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.iconToggle.headline" resname="component.checkbox.section.iconToggle.headline">
        <source>Icon Toggle</source>
        <target state="needs-translation">Icon Toggle</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.labeledToggle.headline" resname="component.checkbox.section.labeledToggle.headline">
        <source>Labeled Toggle</source>
        <target state="needs-translation">Labeled Toggle</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.switch.headline" resname="component.checkbox.section.switch.headline">
        <source>Switch</source>
        <target state="needs-translation">Switch</target>
      </trans-unit>
      <trans-unit id="component.checkbox.section.toggle.headline" resname="component.checkbox.section.toggle.headline">
        <source>Toggle</source>
        <target state="needs-translation">Toggle</target>
      </trans-unit>
      <!-- Component: Flash message -->
      <trans-unit id="component.flashMessage.headline" resname="component.flashMessage.headline">
        <source>Flash messages</source>
        <target state="needs-translation">Flash messages</target>
      </trans-unit>
      <trans-unit id="component.flashMessage.section.color.headline" resname="component.flashMessage.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.flashMessage.section.color.text" resname="component.flashMessage.section.color.text">
        <source><![CDATA[The color is decided by setting the corresponding <code>TYPO3\CMS\Core\Type\ContextualFeedbackSeverity</code>. The following options are available:]]></source>
        <target state="needs-translation"><![CDATA[The color is decided by setting the corresponding <code>TYPO3\CMS\Core\Type\ContextualFeedbackSeverity</code>. The following options are available:]]></target>
      </trans-unit>
      <trans-unit id="component.flashMessage.section.default.headline" resname="component.flashMessage.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <!-- Component: Form -->
      <trans-unit id="component.form.headline" resname="component.form.headline">
        <source>Form</source>
        <target state="needs-translation">Form</target>
      </trans-unit>
      <trans-unit id="component.form.section.filter.headline" resname="component.form.section.filter.headline">
        <source>Filter</source>
        <target state="needs-translation">Filter</target>
      </trans-unit>
      <!-- Component: Infobox -->
      <trans-unit id="component.infobox.headline" resname="component.infobox.headline">
        <source>Infobox</source>
        <target state="needs-translation">Infobox</target>
      </trans-unit>
      <trans-unit id="component.infobox.introtext" resname="component.infobox.introtext">
        <source>This is a fluid based widget for the backend that can be inserted as view helper.</source>
        <target state="needs-translation">This is a fluid based widget for the backend that can be inserted as view helper.</target>
      </trans-unit>
      <trans-unit id="component.infobox.section.color.headline" resname="component.infobox.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.infobox.section.customIcon.headline" resname="component.infobox.section.customIcon.headline">
        <source>Custom icon</source>
        <target state="needs-translation">Custom icon</target>
      </trans-unit>
      <trans-unit id="component.infobox.section.customIcon.text" resname="component.infobox.section.customIcon.text">
        <source><![CDATA[It is also possible to use a custom icon. Just pass the icon identifier as <code>iconName</code> to the view helper. The identifier must be registered in your TYPO3 installation.]]></source>
        <target state="needs-translation"><![CDATA[It is also possible to use a custom icon. Just pass the icon identifier as <code>iconName</code> to the view helper. The identifier must be registered in your TYPO3 installation.]]></target>
      </trans-unit>
      <trans-unit id="component.infobox.section.default.headline" resname="component.infobox.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.infobox.section.withoutIcon.headline" resname="component.infobox.section.withoutIcon.headline">
        <source>Without icon</source>
        <target state="needs-translation">Without icon</target>
      </trans-unit>
      <!-- Component: Modal -->
      <trans-unit id="component.modal.headline" resname="component.modal.headline">
        <source>Modal</source>
        <target state="needs-translation">Modal</target>
      </trans-unit>
      <trans-unit id="component.modal.introtext" resname="component.modal.introtext">
        <source>Modals on buttons can be triggered using the t3js-modal-trigger class. There are various data attributes to customize text and behavior. Not all of them are shown here.</source>
        <target state="needs-translation">Modals on buttons can be triggered using the t3js-modal-trigger class. There are various data attributes to customize text and behavior. Not all of them are shown here.</target>
      </trans-unit>
      <trans-unit id="component.modal.section.customTitleContent.headline" resname="component.modal.section.customTitleContent.headline">
        <source>Custom title and content within the modal</source>
        <target state="needs-translation">Custom title and content within the modal</target>
      </trans-unit>
      <trans-unit id="component.modal.section.default.headline" resname="component.modal.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.modal.section.severity.headline" resname="component.modal.section.severity.headline">
        <source>Severity</source>
        <target state="needs-translation">Severity</target>
      </trans-unit>
      <!-- Component: Notification -->
      <trans-unit id="component.notification.headline" resname="component.notification.headline">
        <source>Notifications</source>
        <target state="needs-translation">Notifications</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.headline" resname="component.notification.section.actionButtons.headline">
        <source>Action Buttons</source>
        <target state="needs-translation">Action Buttons</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.text" resname="component.notification.section.actionButtons.text">
        <source>Notification can be enriched with action buttons to trigger two kinds of actions: immediate action and deferred actions.</source>
        <target state="needs-translation">Notification can be enriched with action buttons to trigger two kinds of actions: immediate action and deferred actions.</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.immediateAction.headline" resname="component.notification.section.actionButtons.immediateAction.headline">
        <source>Immediate Action</source>
        <target state="needs-translation">Immediate Action</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.immediateAction.text" resname="component.notification.section.actionButtons.immediateAction.text">
        <source>Immediate actions are executed directly when the action button is triggered. The notification will dismiss immediately. This action type is suitable for action that don't need any processing time, e.g. calling a backend module.</source>
        <target state="needs-translation">Immediate actions are executed directly when the action button is triggered. The notification will dismiss immediately. This action type is suitable for action that don't need any processing time, e.g. calling a backend module.</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.deferredAction.headline" resname="component.notification.section.actionButtons.deferredAction.headline">
        <source>Deferred Action</source>
        <target state="needs-translation">Deferred Action</target>
      </trans-unit>
      <trans-unit id="component.notification.section.actionButtons.deferredAction.text" resname="component.notification.section.actionButtons.deferredAction.text">
        <source>Deferred actions are suitable for actions that need a period of time until they finish, e.g. AJAX calls. The notifications will close as soon the action has ended successfully. When invoked, the button will show a spinner icon to indicate some activity.</source>
        <target state="needs-translation">Deferred actions are suitable for actions that need a period of time until they finish, e.g. AJAX calls. The notifications will close as soon the action has ended successfully. When invoked, the button will show a spinner icon to indicate some activity.</target>
      </trans-unit>
      <trans-unit id="component.notification.section.default.headline" resname="component.notification.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.notification.implementation.html" resname="component.notification.implementation.html">
        <source>Implementation via HTML:</source>
        <target state="needs-translation">Implementation via HTML:</target>
      </trans-unit>
      <trans-unit id="component.notification.implementation.script" resname="component.notification.implementation.script">
        <source>Implementation via script:</source>
        <target state="needs-translation">Implementation via script:</target>
      </trans-unit>
      <trans-unit id="component.notification.section.severity.headline" resname="component.notification.section.severity.headline">
        <source>Severity</source>
        <target state="needs-translation">Severity</target>
      </trans-unit>
      <trans-unit id="component.notification.section.severity.text" resname="component.notification.section.severity.text">
        <source>All notifications disappear after 5 seconds by default, except for the error message, which will remain stuck unless reconfigured.</source>
        <target state="needs-translation">All notifications disappear after 5 seconds by default, except for the error message, which will remain stuck unless reconfigured.</target>
      </trans-unit>
      <!-- Component: Pagination -->
      <trans-unit id="component.pagination.headline" resname="component.pagination.headline">
        <source>Pagination</source>
        <target state="needs-translation">Pagination</target>
      </trans-unit>
      <trans-unit id="component.pagination.section.default.headline" resname="component.pagination.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <!-- Component: Progress indicator -->
      <trans-unit id="component.progressIndicator.headline" resname="component.progressIndicator.headline">
        <source>Progress indicators</source>
        <target state="needs-translation">Progress indicators</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.introtext" resname="component.progressIndicator.introtext">
        <source><![CDATA[Progress bars represent a specific state that can be displayed in a percental fashion, e.g. amount of uploaded files, executed Upgrade Wizards or disk space usage.<br>If the exact amount of data being loaded is not known, progress bars may be rendered in an indeterminate state.<br>If applicable, use clear wording that describes the progress bar.]]></source>
        <target state="needs-translation"><![CDATA[Progress bars represent a specific state that can be displayed in a percental fashion, e.g. amount of uploaded files, executed Upgrade Wizards or disk space usage.<br>If the exact amount of data being loaded is not known, progress bars may be rendered in an indeterminate state.<br>If applicable, use clear wording that describes the progress bar.]]></target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.customLabel.headline" resname="component.progressIndicator.section.customLabel.headline">
        <source>Custom label</source>
        <target state="needs-translation">Custom label</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.customLabel.text" resname="component.progressIndicator.section.customLabel.text">
        <source>Optionally, a label can be displayed below the progress bar.</source>
        <target state="needs-translation">Optionally, a label can be displayed below the progress bar.</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.default.headline" resname="component.progressIndicator.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.default.text" resname="component.progressIndicator.section.default.text">
        <source>By default, an indefinite progress is displayed.</source>
        <target state="needs-translation">By default, an indefinite progress is displayed.</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.maxValue.headline" resname="component.progressIndicator.section.maxValue.headline">
        <source>Max value</source>
        <target state="needs-translation">Max value</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.severity.headline" resname="component.progressIndicator.section.severity.headline">
        <source>Severity</source>
        <target state="needs-translation">Severity</target>
      </trans-unit>
      <trans-unit id="component.progressIndicator.section.value.headline" resname="component.progressIndicator.section.value.headline">
        <source>Value</source>
        <target state="needs-translation">Value</target>
      </trans-unit>
      <!-- Component: Tabs -->
      <trans-unit id="component.tabs.headline" resname="component.tabs.headline">
        <source>Tab</source>
        <target state="needs-translation">Tab</target>
      </trans-unit>
      <trans-unit id="component.tabs.section.default.headline" resname="component.tabs.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.tabs.section.default.text" resname="component.tabs.section.default.text">
        <source>The last selected tab is stored in local browser storage.</source>
        <target state="needs-translation">The last selected tab is stored in local browser storage.</target>
      </trans-unit>
      <!-- Component: Table -->
      <trans-unit id="component.table.headline" resname="component.table.headline">
        <source>Tables</source>
        <target state="needs-translation">Tables</target>
      </trans-unit>
      <trans-unit id="component.table.introtext" resname="component.table.introtext">
        <source>Use tables to show tabular data. The action icons should always be in the last table row cell.</source>
        <target state="needs-translation">Use tables to show tabular data. The action icons should always be in the last table row cell.</target>
      </trans-unit>
      <trans-unit id="component.table.section.color.headline" resname="component.table.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="component.table.section.color.text" resname="component.table.section.color.text">
        <source><![CDATA[To color table rows, a class can be added to the <code>tr</code> element.]]></source>
        <target state="needs-translation"><![CDATA[To color table rows, a class can be added to the <code>tr</code> element.]]></target>
      </trans-unit>
      <trans-unit id="component.table.section.colorScheme.default.headline" resname="component.table.section.colorScheme.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.table.section.colorScheme.colorFullExample.headline" resname="component.table.section.colorScheme.colorFullExample.headline">
        <source>Color (full example)</source>
        <target state="needs-translation">Color (full example)</target>
      </trans-unit>
      <trans-unit id="component.table.section.default.headline" resname="component.table.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="component.table.section.wideTables.headline" resname="component.table.section.wideTables.headline">
        <source>Wide tables</source>
        <target state="needs-translation">Wide tables</target>
      </trans-unit>
      <trans-unit id="component.table.section.wideTables.text" resname="component.table.section.wideTables.text">
        <source><![CDATA[Wide tables should be wrapped in with <code>div.table-fit</code>.]]></source>
        <target state="needs-translation"><![CDATA[Wide tables should be wrapped in with <code>div.table-fit</code>.]]></target>
      </trans-unit>
      <!-- Component: Tree -->
      <trans-unit id="component.tree.headline" resname="component.tree.headline">
        <source>Trees</source>
        <target state="needs-translation">Trees</target>
      </trans-unit>
      <trans-unit id="component.tree.section.collapsibleTree.headline" resname="component.tree.section.collapsibleTree.headline">
        <source>Collapsible tree</source>
        <target state="needs-translation">Collapsible tree</target>
      </trans-unit>
      <trans-unit id="component.tree.section.collapsibleTree.text" resname="component.tree.section.collapsibleTree.text">
        <source><![CDATA[Collapsible trees are used to show the configuration in a more structured way. Lower levels can be opened and closed, while the entries are collapsed by default. If a user opens entries, this state is saved in the session. There are additional data attributes that can be added to <code>div.treelist-collapse</code> to configure the collapse state.]]></source>
        <target state="needs-translation"><![CDATA[Collapsible trees are used to show the configuration in a more structured way. Lower levels can be opened and closed, while the entries are collapsed by default. If a user opens entries, this state is saved in the session. There are additional data attributes that can be added to <code>div.treelist-collapse</code> to configure the collapse state.]]></target>
      </trans-unit>
      <trans-unit id="component.tree.section.fileTree.headline" resname="component.tree.section.fileTree.headline">
        <source>File tree</source>
        <target state="needs-translation">File tree</target>
      </trans-unit>
      <trans-unit id="component.tree.section.fileTree.text" resname="component.tree.section.fileTree.text">
        <source>File trees are initialized via TypeScript like the page trees.</source>
        <target state="needs-translation">File trees are initialized via TypeScript like the page trees.</target>
      </trans-unit>
      <trans-unit id="component.tree.section.pageTree.headline" resname="component.tree.section.pageTree.headline">
        <source>Page tree</source>
        <target state="needs-translation">Page tree</target>
      </trans-unit>
      <trans-unit id="component.tree.section.pageTree.text" resname="component.tree.section.pageTree.text">
        <source>Initialization of a page tree is done via TypeScript as in the code example below.</source>
        <target state="needs-translation">Initialization of a page tree is done via TypeScript as in the code example below.</target>
      </trans-unit>
      <!-- Styles: Color tokens -->
      <trans-unit id="styles.colorTokens.headline" resname="styles.colorTokens.headline">
        <source>Color Tokens</source>
        <target state="needs-translation">Color Tokens</target>
      </trans-unit>
      <trans-unit id="styles.colorTokens.introtext" resname="styles.colorTokens.introtext">
        <source><![CDATA[Surfaces used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></source>
        <target state="needs-translation"><![CDATA[Surfaces used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></target>
      </trans-unit>
      <!-- Styles: Icons -->
      <trans-unit id="styles.icons.headline" resname="styles.icons.headline">
        <source>Icons</source>
        <target state="needs-translation">Icons</target>
      </trans-unit>
      <trans-unit id="styles.icons.introtext" resname="styles.icons.introtext">
        <source>Icons can be used in backend modules. TYPO3 automatically sends the corresponding HTML output code.</source>
        <target state="needs-translation">Icons can be used in backend modules. TYPO3 automatically sends the corresponding HTML output code.</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.default.headline" resname="styles.icons.section.default.headline">
        <source>Default</source>
        <target state="needs-translation">Default</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.overlay.headline" resname="styles.icons.section.overlay.headline">
        <source>Overlay</source>
        <target state="needs-translation">Overlay</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.overview.headline" resname="styles.icons.section.overview.headline">
        <source>Overview</source>
        <target state="needs-translation">Overview</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.size.headline" resname="styles.icons.section.size.headline">
        <source>Size</source>
        <target state="needs-translation">Size</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.usage.headline" resname="styles.icons.section.usage.headline">
        <source>Usage</source>
        <target state="needs-translation">Usage</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.usage.bitmap.headline" resname="styles.icons.section.usage.bitmap.headline">
        <source>Bitmap</source>
        <target state="needs-translation">Bitmap</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.usage.implementation" resname="styles.icons.section.usage.implementation">
        <source>Implementation in Fluid via ViewHelper:</source>
        <target state="needs-translation">Implementation in Fluid via ViewHelper:</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.usage.registration" resname="styles.icons.section.usage.registration">
        <source>Registration:</source>
        <target state="needs-translation">Registration:</target>
      </trans-unit>
      <trans-unit id="styles.icons.section.usage.svg.headline" resname="styles.icons.section.usage.svg.headline">
        <source>SVG</source>
        <target state="needs-translation">SVG</target>
      </trans-unit>
      <!-- Styles: Shadows -->
      <trans-unit id="styles.shadows.headline" resname="styles.shadows.headline">
        <source>Shadows</source>
        <target state="needs-translation">Shadows</target>
      </trans-unit>
      <trans-unit id="styles.shadows.introtext" resname="styles.shadows.introtext">
        <source><![CDATA[Shadows used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></source>
        <target state="needs-translation"><![CDATA[Shadows used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></target>
      </trans-unit>
      <!-- Styles: Surfaces -->
      <trans-unit id="styles.surfaces.headline" resname="styles.surfaces.headline">
        <source>Surfaces</source>
        <target state="needs-translation">Surfaces</target>
      </trans-unit>
      <trans-unit id="styles.surfaces.introtext" resname="styles.surfaces.introtext">
        <source><![CDATA[Surfaces used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></source>
        <target state="needs-translation"><![CDATA[Surfaces used in the TYPO3 Backend, for <strong>internal usage only</strong>.]]></target>
      </trans-unit>
      <trans-unit id="styles.typography.section.color.headline" resname="styles.typography.section.color.headline">
        <source>Color</source>
        <target state="needs-translation">Color</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.natural.headline" resname="styles.typography.section.natural.headline">
        <source>Natural</source>
        <target state="needs-translation">Natural</target>
      </trans-unit>
      <!-- Styles: Typography -->
      <trans-unit id="styles.typography.headline" resname="styles.typography.headline">
        <source>Typography</source>
        <target state="needs-translation">Typography</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.headings.headline" resname="styles.typography.section.headings.headline">
        <source>Headings</source>
        <target state="needs-translation">Headings</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.headings.text" resname="styles.typography.section.headings.text">
        <source><![CDATA[Headline "H1" is the main headline within each backend module. Only added once to every backend page.<br>Headline "H2" is the headline for every section in backend modules. Place above each section and use several times.<br>Headline "H3" can be used to split section content into logical units. Place in between paragraphs within section.<br>Headline "H4" might be used to split off meta / footer information.]]></source>
        <target state="needs-translation"><![CDATA[Headline "H1" is the main headline within each backend module. Only added once to every backend page.<br>Headline "H2" is the headline for every section in backend modules. Place above each section and use several times.<br>Headline "H3" can be used to split section content into logical units. Place in between paragraphs within section.<br>Headline "H4" might be used to split off meta / footer information.]]></target>
      </trans-unit>
      <trans-unit id="styles.typography.section.links.headline" resname="styles.typography.section.links.headline">
        <source>Links</source>
        <target state="needs-translation">Links</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.lists.headline" resname="styles.typography.section.lists.headline">
        <source>Lists</source>
        <target state="needs-translation">Lists</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.lists.text" resname="styles.typography.section.lists.text">
        <source><![CDATA[By default, ordered and unordered lists are formatted with bullets and decimals. By adding <code>class="list-unstyled"</code> to the ol or ul tag, it is possible to structure content in list form without the typical list styling.]]></source>
        <target state="needs-translation"><![CDATA[By default, ordered and unordered lists are formatted with bullets and decimals. By adding <code>class="list-unstyled"</code> to the ol or ul tag, it is possible to structure content in list form without the typical list styling.]]></target>
      </trans-unit>
      <trans-unit id="styles.typography.section.lists.ordered.headline" resname="styles.typography.section.lists.ordered.headline">
        <source>Ordered list</source>
        <target state="needs-translation">Ordered list</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.lists.unordered.headline" resname="styles.typography.section.lists.unordered.headline">
        <source>Unordered list</source>
        <target state="needs-translation">Unordered list</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.paragraph.headline" resname="styles.typography.section.paragraph.headline">
        <source>Paragraph</source>
        <target state="needs-translation">Paragraph</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.smallText.headline" resname="styles.typography.section.smallText.headline">
        <source>Small text</source>
        <target state="needs-translation">Small text</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.smallText.text" resname="styles.typography.section.smallText.text">
        <source>Footer information, small notices can be wrapped in small text tag.</source>
        <target state="needs-translation">Footer information, small notices can be wrapped in small text tag.</target>
      </trans-unit>
      <trans-unit id="styles.typography.section.textColor.headline" resname="styles.typography.section.textColor.headline">
        <source>Text color</source>
        <target state="needs-translation">Text color</target>
      </trans-unit>
    </body>
  </file>
</xliff>
